slouch

New plan:
* line-oriented, haskell-ish syntax, with inline Go when that proves too restrictive
* implicit vars galore
* can call Go stdlib functions
* interpreted
* breakpoints for debugging
* separate terminal for live output
    * or vscode plugin

IDEA: "provenance"
    * after a map, each value retains its "provenance"
    * e.g. `[1,2,3] | map (* 2)` yields [2,4,6], but ^&2 yields 1, ^&4 yields 2, etc.
    * could be handy for scenarios where you'd usually need to zip things together manually
    * maybe opt in? call (provenance x) to turn x into a provenance-remembering value
        * perf overhead might be problematic otherwise...

IDEA: choices
    x == 2;3 is equivalent to x == 2 || x == 3
    map {x * 2;3} xs is equivalent to map {[x*2, x*3]} xs
    handy for iterating over perms?

example:

    cycle | window 2 | filter {all {=}} | map head | sum
    =l len
    cycle | filter {x == input[i+l/2]} | sum

	fold {+}
	head $ dups $ scan {+} $ cycle

	=fuel {x/3 - 2}
	sum $ map m
	vvv
		func recfuel(x int) int {
			if x <= 0 {
				return 0
			}
			f := x/3 - 2
			return f + recfuel(f)
		}
	^^^
	sum $ map recfuel input






import . "slouch"

func mass(x int) int {
    m := Clamp(x/3 - 2, 0)
    if m > 0 {
        m += mass(m)
    }
    return m
}

func main() {
    Provide("mass", mass)
    Execute(`
ints
(mapsum mass)
`)
}



TODO:
- [ ] rewrite everything
- [ ] readline
    - [ ] autocomplete!
	* hoogle-style: suggest fns based on what types are on the stack!!
- [ ] implement basic math
- [ ] implement more builtins
- [ ] conditionals
- [ ] get simplest solutions working!
- [ ] implement bigints

∑ ∫ λ




GOALS:
- optimize for write speed
    - but also minimize mistakes!
    - special forms are less typing, but harder to swap out/debug
    - highly composable -- easy to extend an expression, split out parts of an expression, etc.
- "do what I mean"
- functional flavor, but not too strict
- definitely needs a repl, for building up to a solution
    - github.com/abiosoft/ishell
- inspiration: https://betaveros.github.io/paradoc
- make these things really easy:
    - parsing (pattern matching)
    - operations with Pos and Dir
    - operations on grids
        - should handle boundaries automatically
    - exploring mazes (bfs, dfs)
    - simulations (virtual machines, n-body, game of life)
        - "stateful" VM with instruction pointer, opcodes, etc.
        - cellular automata with next-step rules
    - combinatorics (permutations, n choose k)
    - detecting duplicates
    - counting occurences
    - find the input x to f that produces output y
        * (requires ordered output)
        - linear search from lower bound
        - binary search with upper bound
        - exponential search with no upper bound

FLAVOR:
- stack-based / concatenative
- interpreted
- everything is an expression
- currying
- lazy
    - "Read"-like implementation
        * instead of GetNextArrayValue -> int, ReadNextArrayValues -> []int
- mostly stream processing, but also need statefulness sometimes
    - no explicit loops means loops are in the interpreter -- much faster


PLANNED:
- bigints by default (with flag for speed)
    - but some problems are modulo 2^32 or 2^64; maybe set a global integer mode?
- _ as "hole" in lambda (don't need _1 _2 _3; just fill with successive stack vals)


IDEAS:
- separate terminal for output preview; no need for fancy termui
- hotkeys for previewing map/fold: start at 1 element, then increase or decrease
- need a timeout mechanism; insert timer checks at regular intervals?
    * seems hard to avoid getting stuck in a tight loop with no timer checks
- need a way to experiment with transformations before applying them
    * i.e. test out a sequence of actions on a single array element, then map to all of them 
    - key combo to save current stack and restore it with another key
- repl is a "live view" of a file, for easier editing of multi-line code
- inline Go (`strconv.Quote`)
- kwargs: remove mental overhead of argument order
    * would need autocomplete anyway, though; might as well just show signature in REPL
- "tracing mode", printing every 1000 iterations or something
    - print grid / maze / game of life
    - watch for long-running processes, allow pause/resume
    - catch stack overflows
    - DON'T EXPLODE; should never have to restart the repl
        - (maybe even recover() at top level!)
- number each prompt; allow jumping to any previous prompt
    * (probably too much memory usage here, but maybe last 3 or something)
    * allow referencing any stack value from any previous prompt
	- key combo to display stack at prompt n
- stack edit mode

QUESTIONS:



TOO CRAZY:



examples:
http://www.maurits.vdschee.nl/scatterplot/


2015:

day1:
"inputs/2015/day01a" slurp chars ["(" 1 ")" -1] match (+) scan1 [(-1 at) (-1 find)] apply 

or:

["(" ")"] "day1_input.txt" readFile count map unquote -
"day1_input.txt" readFile [ ["(" 1 ")" -1] match ] map [+] scan -1 find

or:

"day1_input.txt" readFile { ["(" count] [")" count] } cleave -

day2:
$dims = cat "day2_input.txt" | lines | parse "$lx$wx$h"
$sides = $dims |{ [$l*$w, $w*$h, $h*$l]
$sides |{ (2*(sum $) + (min $)) | sum
$wrapping = $sides |{ sort | fold (+) 2 * ($.0 + $.1)
$bow = $dims | sum [$l $w $h]
$wrapping + $bow

or:
cat "day2_input.txt" | lines |{ (| ints | pairs | 2*sum + min) |}+





2016:

day1:
$a = Agent [0,0] Up | .trace
$move a str = match str
    "R$d" -> a | .turnRight | .walk $d
    "L$d" -> a | .turnLeft | .walk $d
$trail = cat "day1_input.txt" | split ', ' | fold $move $ $a | .trail
$trail | last | abs $.0 + abs $.1
$trail | first (insert $seen)

day2:
$dirs = cat "day2_input.txt" | lines | map chars
$keys = [[1 2 3]
         [4 5 6]
         [7 8 9]]
$move p c = p | match c
    'U' -> .up
    'D' -> .down
    'L' -> .left
    'R' -> .right
    | clamp $keys
$code = map (fold (find 5 $keys) $move $) | map (get $ $keys)
$dirs | $code
$keys = [[    1    ]
         [  2 3 4  ]
         [5 6 7 8 9]
         [  A B C  ]
         [    D    ]]
$dirs | $code


2017:

day1:
$ds = cat "day1_input.txt" | digits
$matchsum = filter $.0 == $.1 | get 0 | sum
$ds | append $ds[0] | window 2 | $matchsum
0..$ds | map [get $ $ds, get ($+len($ds)/2 % len($ds)) $ds] | $matchsum

day2:
$rows = cat "day2_input.txt" | lines | map ints
$rows | map ($ | sort | (last $) - (first $)) | sum
$rows |{ (| pairs | find ($.0 %? $.1) | $.1 / $.0) | sum


2018:
day1:
$nums = cat "day1_input.txt" | ignore '+' | ints
$nums | sum
$nums | scan (+) | until (insert $seen) | length

day2:
$ids = cat "day2_input.txt" | lines
$with n = $ids | map occurences | filter (has n) | length
($with 2) * ($with 3)
$diff a b = 0..$a | filter ($a[$] != $b[$]) | map ($a[$])
$ids | pairs | first ($diff $.0 $.1 | length | == 1) | ignore ($diff $.0 $.1) $.0

or:
$ids = cat "day2_input.txt" | lines
$with n = $ids |{ occurences |> has n | length
[2 3] |{ $with |}*


2019:

day1:
$nums = cat "day1_input.txt" | ints
$nums | map ($ / 3) - 2 | sum
$mass x = let m = (x/3 - 2) in m > 0 ? m + $mass m : 0
$nums | map $mass | sum

or:
cat "day1_input.txt" | ints |= $nums
$nums |{ $/3 - 2 |}+
| iterate ($/3 - 2) | until (< 0) }+ |= $mass
$nums |{ $mass |}+

day2:
$prog = cat "day2_input.txt" | ints
$prog.1 = 12
$prog.2 = 2
0..$prog | window 4 | until $.0 == 99 | match $.0
    1 -> $prog.($.3) = $prog.($.1) + $prog.($.2)
    2 -> $prog.($.3) = $prog.($.1) + $prog.($.2)
$prog | get 0


maxwater problem:
O(n^2):
cat "input.txt" | ints | indexed | pairs |{ ($.1.0 - $.0.0) * min($.1.1, $.0.1) | max
Meet-in-middle:
start at 0 and n; on each iter, inc 0 or dec n; take max



2015:

day 1:
match ["(": 1, ")": -1]
sum
# part 2
scan (+)
find (-1)

day 2:
lines                       ["3x11x24", "13x5x19", ...]
map {
    ints                    [[3,11,24], [13,5,19], ...]
    choose 2                [[3,11], [11,24], ...]
    map prod                [33, 264, ...]
    sort                    [33, 264, ...]
    prepend (head _)        [33, 33, ...]
    map (*2)                [66, 66, ...]
    sum                     132
}
sum

day 3:
dirs = matchdirs "^v<>"
fn = {
    a = actor(trace: true)
    a.move dirs
    uniq a.path
    len
}
fn dirs
fn (nth 2 dirs) + fn (nth 2 (drop 1 dirs))


day 4:
first ({
    prepend input
    @crypto/md5.Sum
    hex
    take 5
    (==) "00000"
}) iota

day 5:
lines
count (c3v && cr2 && !cban)
c3v = {
    count (containsany "aeiou")
    (>=) 3
}
cr2 = {
    runs
    any {len == 2}
}
cban = {
    containsany ["ab", "cd", "pq", "xy"]
}
cp2 = {
    x = _
    window 2
    map (occurences x)
    any (>= 2)
}
clb = {
    window 3
    any (head == last)
}

day 6:
g = boolgrid
fold g {
    r := (rect (ints _))
    switch [
        (contains "on"): {
            g.true r
        },
        (contains "off"): {
            g.false r
        }
        (contains "toggle"): {
            g.toggle r
        }
    ]
}
count id
# part 2
g = intgrid
fold g {
    r := (rect (ints _))
    switch [
        (contains "on"): {
            g.inc r
        },
        (contains "off"): {
            g.dec r
            map (clampmin 0) g
        }
        (contains "toggle"): {
            g.inc r
            g.inc r
        }
    ]
}
sum



day 7:
vars = {}
asm [
    "N -> V": (vars[V] = N)
    "X AND Y -> Z": (vars[Z] = vars[X] & vars[Y])
    "X OR Y -> Z": (vars[Z] = vars[X] | vars[Y])
    "X LSHIFT N -> Z": (vars[Z] = vars[X] << N)
    "X RSHIFT N -> Z": (vars[Z] = vars[X] >> N)
    "NOT X -> Z": (vars[Z] = !vars[X])
]
runasm
vars["a"]; print
vars = {"b": vars["a"]}
runasm
vars["a"]; print


day 9:
lines
map (parse "A to B = D")
{shortestpath; print}
{longestpath; print}


day 10:
runs("1113222113")
iterate 40 {
    concatmap (x -> str(len(x)) + str(x[0]))
}
len





instead of pushing to stack, push to “registers” (x, y, z, a, b, c, …)
“start recording”, iterate, then “Save as fn”
infinite undo, restoring state of registers


2015:

day 1:
load "day1.txt"             # by default, stores in x
match ["(": 1, ")": -1]     # by default, operates on x and stores in x
sum
print                       # or better, 'cb' to copy to clipboard
# part 2
undo
undo
scan (+)
find (-1)
print

day 2:
load "day2.txt"
lines                       ["3x11x24", "13x5x19", ...]
map rec
    ints                    [[3,11,24], [13,5,19], ...]
    choose 2                [[3,11], [11,24], ...]
    map prod                [33, 264, ...]
    sort                    [33, 264, ...]
    prepend (head _)        [33, 33, ...]
    map (*2)                [66, 66, ...]
    sum                     132
    done
sum

day 3:
dirs = matchdirs "^v<>"
fn = {
    a = actor(trace: true)
    a.move dirs
    uniq a.path
    len
}
fn dirs
fn (nth 2 dirs) + fn (nth 2 (drop 1 dirs))


day 4:
first ({
    prepend input
    @crypto/md5.Sum
    hex
    take 5
    (==) "00000"
}) iota

day 5:
lines
count (c3v && cr2 && !cban)
c3v = {
    count (containsany "aeiou")
    (>=) 3
}
cr2 = {
    runs
    any {len == 2}
}
cban = {
    containsany ["ab", "cd", "pq", "xy"]
}
cp2 = {
    x = _
    window 2
    map (occurences x)
    any (>= 2)
}
clb = {
    window 3
    any (head == last)
}

day 6:
g = boolgrid
fold g {
    r := (rect (ints _))
    switch [
        (contains "on"): {
            g.true r
        },
        (contains "off"): {
            g.false r
        }
        (contains "toggle"): {
            g.toggle r
        }
    ]
}
count id
# part 2
g = intgrid
fold g {
    r := (rect (ints _))
    switch [
        (contains "on"): {
            g.inc r
        },
        (contains "off"): {
            g.dec r
            map (clampmin 0) g
        }
        (contains "toggle"): {
            g.inc r
            g.inc r
        }
    ]
}
sum



day 7:
vars = {}
asm [
    "N -> V": (vars[V] = N)
    "X AND Y -> Z": (vars[Z] = vars[X] & vars[Y])
    "X OR Y -> Z": (vars[Z] = vars[X] | vars[Y])
    "X LSHIFT N -> Z": (vars[Z] = vars[X] << N)
    "X RSHIFT N -> Z": (vars[Z] = vars[X] >> N)
    "NOT X -> Z": (vars[Z] = !vars[X])
]
runasm
vars["a"]; print
vars = {"b": vars["a"]}
runasm
vars["a"]; print


day 9:
lines
map (parse "A to B = D")
{shortestpath; print}
{longestpath; print}


day 10:
runs("1113222113")
iterate 40 {
    concatmap (x -> str(len(x)) + str(x[0]))
}
len

